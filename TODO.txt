TODO


improve mouseover state
	+ On Mar 2nd: "Note flickering of mouseover state on drag"


May want to change how text resizes horizontally on center drag
	computes 'center' as the center of the vertical distance of the hitbox
	this is not the same as the 'center' of the text, which should be located at the midline




If Style is created without a parent, it's parent should default to the baseline style
	not sure where the baseline style should be declared,
	it should be a constant variable that can be easily accessed from everywhere
	it should declare all available properties




Figure out how to change Entities when style properties are altered




edit space point query
should be able to get a list of things under the mouse
only highligh the one that the mouse will be working on
it seems weird that you would highlight something that you can't act on?
	that means that the selection has to change a little bit depending on what action is active
	is that too much state going into the selection?
	will that be the user's expected model of operation?







is there any reason to keep Component?
	it's this weird strict-typed flavor in a duck-typed system
	especially that Actions have been reworked to be more like methods,
	maybe components should just be like any other thing attached to a class?
	
	not really sure if there's any motivation to adhere strictly to entity/component style
	considering how in the current structure, methods are attached to the object,
	not to the components
	
	(or like, sometimes the action, but never the component)
	(meaning the structure is NOT actually entity/component at all)










TODO: implement screen space to world space conversion in accordance with new systems
	old system had assumed that there was a global variable with a pointer to Window
	trying to remove that
	need to figure out how to perform coordinate space conversions in a sane manner now






TODO: custom subclass of Hash to deal with action bindings
	need to make sure there's some sort of error when you try to declare inputs for phases that don't actually exist. otherwise, you can just go a bug hunt without knowing where the problem is.

	need to find a balance between duck-typing-style dynamicism and strict protection









TODO: Ruby methods are objects. Apply structure to Action
	methods in Ruby can be manipulated as objects, because everything is an object
	how does this work?
	how is it specifically implemented?
	
	
	would this help implementation of the Action objects,
	to help them function more like method calls?







TODO: consider different views of same space
	view for constraints
	view for queries
	view for entities
	view for just UI entities and the things they correspond to


	custom filter types?
	multiple filters active at one time?
		why shouldn't you be able to layer multiple lenses together?



	maybe use the bitvector from the chipmunk layer to control what things are visible?
	maybe should use a different bitvector instead
	collision is a bit of a different beast
		it is possible there is overlap though
		so should probably still look into this





TODO: change the way corner resize of rectangles works
	currently only allows for resize along the diagonal

	desired mental model:
		moving the selected vertex

	allows for more free-form editing

	(note: this is how my window resizing works)




	should probably have some sort of aspect ratio lock or something like that
	for when you get the proportions right,
	but the size is wrong

	(that might be way better as a constraint though)


	NOTE:
	GIMP allows for aspect ratio lock,
	as well as the ability to specify an aspect ratio
	while editing selections


TODO: fix short circuiting min by, and the entities/text.rb -> Text#nearest_character_boundary() optimization that it messes up



TODO: create action to delete a whole Entity
	delete key by itself deletes single characters though
	so it might be best to have "delete Entity" bound to something different?
	would be weird to have a special case for Text


TODO: remove Object delegate metaprogramming monkeypatch
	should be using def_degelators from Forwardable instead
	that is much more robust


TODO: make sure an empty project can be loaded
	funky stuff is happening here
	
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/data/test/queries.csv
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/data/test/entities.csv
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/data/test/constraints.csv
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/data/test/prototypes.csv
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/rakefile.rb
	/home/ravenskrag/Code/Tools/ThoughtTrace/bin/main.rb
	/home/ravenskrag/Code/Tools/ThoughtTrace/lib/ThoughtTrace/space/serialization.rb
	/home/ravenskrag/Code/Tools/ThoughtTrace/lib/ThoughtTrace/cloning/clone_factory.rb