NOTE: The raketask method_probing_test can be used to examine the methods available through all of the various parts of the Style system, in one convenient place.


-----------------------------------------

document.named_styles   this collection holds abstract Style objects, referenced by name


component               components can hold multiple cascades,
cascade                 and each cascade can hold multiple style objects,
style                   and each style object holds values associated with multiple properties

-----------------------------------------



--- basic structure

property data is always stored in style objects
all other objects in the chain delegate storage to underlying style objects

cascade and style provide the same access interface
as cascades can be nested

The basic read / write interface is also copied by the Component,
but the Component switches between many separate Cascades,
associated with separate mode names,
rather than utilizing all of them simultaneously.









--- style objects

Similar to Hash objects,
they store pairs of properties and their associated values.

Nothing fancy.









--- cascades

cascades always define a primary style
this style can be altered like any other style
but it can not be deleted from it's original Cascade.
The primary style can be used to store values specific to a particular Entity,
which have not been abstracted into a Style shared between Entity objects.

This is good for ideation,         (when you don't know where the property should go yet)
but is also useful for debugging.  (you explicitly want to target only one Entity, pointing it out)




While reading from a Cascade will examine the entire Cascade stack,
the standard writing interface for a Cascade will always alter the primary style.
If you seek to alter a non-primary style,
you must do so explicitly.





Normally, style data is simply read from cascades
by requesting the value associated with a particular property.

The Cascade will handle cascading through the contained cascades / styles to find a value.

The contained Style objects can be moved up and down in priority,
in order to control the cascade order.


However, it is also possible peel back all this abstraction,
and search for particular style objects.









--- style component

The component manages multiple Cascade objects in separate named modes,
and allows switching between them.

Style data can be accessed directly through the Component,
or the abstraction can be peeled back to allow for manipulation of Cascade objects,
and through them, the underlying Style objects.



Style components can copy existing components using Components::Style#mirror
(but be warned, this a a shallow copy, similar to #clone)









--- named styles

The 'named styles' collection within the Document holds special styles.
These styles do not necessarily have an owner in the spatial context.
As these styles are referenced by name,
their names can not be changed once they have been placed into the collection,
unlike other styles, which can alter their names at will.


This referencing of data by names is necessary
because styles need to be referenced across multiple sessions,
by both other pieces of data,
as well as by code.





These named styles can easily be accessed from another Document.
(linking to external data not yet implemented)
There is no namespacing functionality built in to the design of the named styles.
Using separate Documents should provide sufficient namespacing.





Actions can request usage of the named styles collection,
and those that request will be fed the collection upon action initialization.
This allows for things like the Shared Query Style.

Query objects always share one style object that defines a shared appearance,
that way it is fairly clear which objects are marked for Query detection.











--- serialization

All style data is serialized with the rest of the Component data
as part of the Document serialization process.

This allows for Style data which is referenced from
multiple Entity objects to be handled appropriately.





--- on the concept of pallet swapping

pallet swapping should be performed using constraints



there is no longer a need for a dedicated "pallet" class
it's much better in the current paradigm to link styles of various objects together
and eventually have the chain relate to a sort of "root" element
a collection of these root elements would serve as a pallet

changing the root would modify all linked elements

but with proper constraints,
you could also change any style directly,
and it would still propagate to all of the other entities