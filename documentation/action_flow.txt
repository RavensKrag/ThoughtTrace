Actions provide a human interface to firing mutations of objects specified through code.



Actions
	house code needed to execute procedures using a combination of button and mouse inputs

Components
	namespaces for core functionality (ex, physics)

Entity#methods
	manipulate data from anywhere in the Entity (including Components)


Actions cause change by firing entity#methods
Actions house the overarching flow of commands, as well as any interface-specific code,
but all the heavy-lifting should be done with methods from Entity types.
This way, task automation can use Entity methods instead of Actions.
( potential for macroing as well as optimization )






input manager                  -  oversees general flow for all forms of input

mouse                          -  provide access to mouse position (as vector)
button parser                  -  parse raw button up/down sequence to launch button events
button event                   -  abstracted digital input control with push-hold-release structure
MouseInputSystem               -  Extracts an Entity from the Space, and performs an Action on it.
                                  Delegates press-hold-release structure to active Action.
                                  Controls transition between click events, and drag events.


action                         -  uses buttons and mouse inputs to fire methods.
                                  holds any state necessary to apply or undo one command

entity                         -  an object in the space
                                  contains Components
                                  contains methods for manipulation
                                  namespaces actions (actions resolved by following hierarchy)





# Actions are always stored like this:
# inside of an 'Actions' module under the class they control


# NOTE: see ThoughtTrace::Actions::BaseAction for exact structure of Action

Action
	; external interface. this is what's critically important
	def press(point)
	def hold(point)
		update(point)
		apply()
		update_visualization(point)
	def release(point)
	
	def cancel
	
	
	
	; intermediate interface that many Action types implement
	def update(point)
	
	def apply
	def redo
		self.apply()
	def undo
		self.undo()
	
	
	; visualization interface
	def update_visualization(point)
	def draw









+ button inputs are abstracted, and button events are fired

+ mouse is used by action flow controller to figure out where to poll the space for an Entity

+ actions are selected based on the type of Entity extracted

+ click actions are canceled automatically by the mouse input system if the mouse moves after button press, so a single input event can have both a click and a drag input mapped to it

