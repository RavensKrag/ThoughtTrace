current known things:
	
	constraint packages stored in linear collection
	pairs are updated though Packages
	each Package is updated once per frame
	
	each Constraint object can be used in multiple Pairs (thus multiple Packages)
	but that doesn't matter because they don't retain multi-pair state
	
	

questions:
	
	graph or list?
	allow one constraint pair to update multiple times per tick?
	dependency management /  resolution or refrain from doing that?
	looping, deadlock, livelock prevention?
	
	what things can be prevented in text-based coding right now?
	what things require graphs before they can be fully explored and understood?







=====
NOTE:
-----
	The system in it's current form can NOT protect against deadlock / livelock
	those are hard problems this system has inherited
	from distributed programming / parallel programming,
	and maybe an attempt to solve those will be made in future versions.
	Having some sort of graph editing system would certainly help solve those problems.
	However, trying to solve topology problems using purely text-based programming is futile.
=====


Packages stored in linear collection
Pairs are updated though Packages
each Package is updated once per frame

each Constraint object can be used in multiple Pairs (thus multiple Packages)
but that doesn't matter because they don't retain multi-pair state



This structure means that changes may take more than one tick
to propagate to their final destination,
but a full loop in the graph will NEVER be executed within one tick.
This is rudimentary prevention of livelock.
	
	( I don't think it will prevent against ALL livelock situations, but it's something )




This does not prevent the creation of loops in the graph,
nor does it prevent topologies that make it so data never reaches it's destination.

Exercise caution when designing graph topologies.




Topologies could still be constructed that cause clobbering of data,
such that changes to a parent node make it to a child node,
only to later be overwritten by data
that arrived at the destination later, but was older and worse.

The system currently has no way of preventing against such topologies.
It is up to the creator of the graph to make sure that such a condition does not happen.

	(   This is a hard problem from distributed programming
	     that I would like to investigate further,
	     but it requires some rudimentary form of the graph to be established first.   )


== It's not super clear when things will get to their destination, if ever. ==

However, preventing the execution of full loops per frame
will prevent the system from ever fully locking up,
so at least a human operator will be able to visually examine how changes propagate.





In order to try and get changes to propagate to their destination in one frame:

	+ you could execute multiple ticks per frame,
	  as is often done in physics simulations,
	  giving time for the simulation to 'quiet down' before rendering.
	  
	  This would appear as if you rendered 5 frames, but discarded 4 out of 5.
	  The result should have less jitter,
	  but will require more processing power.

	+ you could try to examine the graph's topology,
	  and only update constraint pairs along certain paths,
	  rather than always updating all constraints all the time.
	  
	  This would potentially allow the execution of fewer pairs than in the first suggestion,
	  but would require additional overhead in processing time.
	  If that processing time is too expensive, it would be better to just run extra ticks.
	  
	  
	  details:
		  examine the entire path through the graph, 
		  from the changed node to the 'leaves',
		  and propagating that change all at once.
		  
		  you don't have to examine all constraints,
		  just the ones that continue the propagation of data.
		  
		  the propagation chain can be examined statically,
		  using the dependency code from Constraint.foo()
		  ( NOTE: you would also need to figure out what data is SET by the constraint )
		  
		  ex) given:
			      X Y and Z are constraints
			      a b and c are pieces of data
			      
			      X = ([a] => [b])
			      means "x is a constraint that depends on a and sets b"
			  
		      then:
			      X = ([a] => [b,c])
			      Y = ([b] => [c])
			      Z = ([c] => [c])
			      
			      a chain of XYZ would have to be fully executed,
			      but a chain of XYY would only need to execute XY
				      ( the final Y's dependency was not altered )
			      
			      Thus, any pattern in the form
				      XY???????
			      would terminate after the inital XY and ignore the full subgraph thereafter
		  -----
		  
		  any sort of 'linear-ization' of the graph will have to check for cycles
		  and at least make sure that any unrolled loops are not too long.
		  ( ie, they can still be executed in a single frame's worth of time )
		  
		  Although significantly more complicated,
		  maybe this approach would help solve clobbering / livelock / deadlock issues.
		  
			  (((   but you would probably have to teach the system to identify those cases.
			  	 	It wouldn't be some free systemic side effect,
			  	 	it would be a requirement for implementation.      )))
	  ----------------


Any attempt to make the data cross the graph faster
could potentially slow execution of large graphs.

But as long as you don't execute more constraint pairs than would into one frame,
the end user will not notice any input lag.




The system should always be aware of how long each frame lasts,
and how many ticks can be fit into that frame.
( remember that the computer must complete a full update AND render cycle without delay )

Experimental data is needed to truly tune these values.
Need to know how long it takes for certain Constraint types to fire,
and also how long it takes for things to render.





note that changes won't always propagate the same way
- dependent on both graph topology and update order

Because of this, the designer of the graph must be given control over the order of Packages in the collection,
as that will allow the designer to alter the update order.

This is done in lieu of creating a more sophisticated dependency system.
It is probably not a good replacement for actual dependency management,
and most likely will not scale.
A better system should be built once basic graphs can be constructed to explore dependency systems.





















really only want to update each edge once per tick
	
	this means that some changes will take many ticks
	to propagate all the way to their destination,
	but it ensures that you will never get stuck
	in a situation where you have to traverse an
	entire loop of the graph
		(or multiple iterations of this loop, even)
	in one tick
	
	games have circular flow.
	if you want a 'loop'
	you often want one tick of the loop executed per game tick
	you very rarely want to use a straight 'while' loop in a game
	
	this system is a similar sort of thing
	
	
	note that 'one edge' in this case means
	one pair-wise relationship between two Entity objects
	related by one constraint.
	Thus, the same pair of Entities can be connected by multiple edges,
	even in the same direction,
	and having all of those update in the same frame is totally fine.
	
	But you don't want the same constraint firing
	between two Entity objects multiple times in one frame
	
	
	
	because that has the possibility of creating cycles,
	and that's really bad
	
	
	but note that this is different that firing a Constraint object once per tick,
	because one Constraint object can be used in multiple Pairs

	





















will the system systemically stop looping? or does it need a check?

(((  inspired by Massive Chalice's exploding alchemist armor,
     which chains, but does not loop  )))
------------------------------------------------------------------------------

wait no, it should systemically stop looping
like, it already does without having to do this

it will take a couple of iterations sometimes,
but the system should be able to realize that no values are changing,
and thus will "sleep" the constraints
and not update them
because they do not need to run
because values are not changing
and thus there are no values to propagate






I think the constraint system assumes that you only change one value in the graph per tick
then one entire tick can be dedicated to propagating that one change





but when you update, you want to use a dependency graph, not just a list
	update constraints based on dependency graph, or just a list?





